{
  "html": "<!DOCTYPE HTML>\n<html lang=\"en\">\n<head>\n    <!-- Global site tag (gtag.js) - Google Analytics -->\n    <script async src=\"https://www.googletagmanager.com/gtag/js?id=UA-165835654-1\"></script>\n    <script>\n        window.dataLayer = window.dataLayer || [];\n\n        function gtag() {\n            dataLayer.push(arguments);\n        }\n\n        gtag('js', new Date());\n\n        gtag('config', 'UA-165835654-1');\n    </script>\n\n    <meta charset=\"utf-8\">\n    <meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\n\n        <meta name=\"description\" content=\"The article explains why you should use more enums in Python and what Python provides to you.\"/>\n\n    <meta name=\"keywords\"\n          content=\"\n                  enums in python, introduction to enums, introduction to enumerations, enumerations in python, how to use enums in python, how to use enumerations in python, enums, enumerations, gentle introduction, introduction to enumerations in python, portfolio, florian dahlitz, florian, dahlitz, coding, programming, python, c, java\"/>\n    <meta name=\"author\" content=\"Florian Dahlitz\"/>\n\n    <meta content=\"yes\" name=\"apple-mobile-web-app-capable\">\n    <meta name=\"apple-mobile-web-app-status-bar-style\" content=\"black-translucent\">\n\n\n\n\n\n\n        <title>Why You Should Use More Enums In Python - Blog - Florian Dahlitz</title>\n\n        <!-- Facebook and Twitter integration -->\n        <meta property=\"og:title\" content=\"Why You Should Use More Enums In Python\"/>\n        <meta property=\"og:image\"\n              content=\"https://florian-dahlitz.de/static/images/blog/why-you-should-use-more-enums-in-python/why-you-should-use-more-enums-in-python-m.jpg\"/>\n        <meta property=\"og:url\" content=\"https://florian-dahlitz.de/blog/why-you-should-use-more-enums-in-python\"/>\n        <meta property=\"og:type\" content=\"blog\"/>\n        <meta property=\"og:description\" content=\"A gentle introduction to enumerations in Python\"/>\n        <meta name=\"twitter:title\" content=\"Why You Should Use More Enums In Python\"/>\n        <meta name=\"twitter:description\" content=\"A gentle introduction to enumerations in Python\"/>\n        <meta name=\"twitter:image\"\n              content=\"https://florian-dahlitz.de/static/images/blog/why-you-should-use-more-enums-in-python/why-you-should-use-more-enums-in-python-m.jpg\"/>\n        <meta name=\"twitter:card\" content=\"summary_large_image\"/>\n        <meta name=\"twitter:site\" content=\"@DahlitzF\"/>\n\n\n    <link rel=\"stylesheet\" href=\"/static/css/bootstrap.min.css\">\n    <link rel=\"stylesheet\" href=\"/static/css/main.css?version=1.4\">\n\n    <!-- Prism -->\n    <link rel=\"stylesheet\" href=\"/static/css/prism.css?version=1.1\">\n\n    <!-- Favicon -->\n    <link rel=\"shortcut icon\" sizes=\"16x16 24x24 32x32 48x48 64x64\" href=\"/static/images/favicon/favicon.ico\">\n    <link rel=\"apple-touch-icon\" href=\"/static/images/favicon/apple-touch-icon.png\">\n</head>\n<body>\n<nav class=\"navbar navbar-expand-sm fixed-top navbar-dark bg-dark\">\n    <div class=\"container topnav\">\n        <a class=\"navbar-brand\" href=\"/\">\n            <picture>\n                <source srcset=\"/static/images/brand-icon/brand-icon-s.webp\"\n                        type=\"image/webp\">\n                <img src=\"/static/images/brand-icon/brand-icon-s.png\"\n                     alt=\"Brand Icon\">\n            </picture> Coding</a>\n        <button class=\"navbar-toggler\" type=\"button\" data-toggle=\"collapse\" data-target=\"#navbarNavDropdown\"\n                aria-controls=\"navbarNavDropdown\" aria-expanded=\"false\" aria-label=\"Toggle navigation\">\n            <span class=\"navbar-toggler-icon\"></span>\n        </button>\n        <div class=\"collapse navbar-collapse\" id=\"navbarNavDropdown\">\n            <ul class=\"navbar-nav ml-auto\">\n                <li class=\"nav-item \">\n                    <a class=\"nav-link\" href=\"/\">Home</a>\n                </li>\n                <li class=\"nav-item \">\n                    <a class=\"nav-link\" href=\"/portfolio\">Portfolio</a>\n                </li>\n                <li class=\"nav-item active\">\n                    <a class=\"nav-link\" href=\"/blog\">Blog</a>\n                </li>\n                <li class=\"nav-item \">\n                    <a class=\"nav-link\" href=\"/feeds\">Feeds</a>\n                </li>\n                <li class=\"nav-item \">\n                    <a class=\"nav-link\" href=\"/contact\">Contact</a>\n                </li>\n            </ul>\n        </div>\n    </div>\n</nav>\n\n\n    <div class=\"header banner\">\n        <div class=\"row h-100\">\n            <div class=\"col-md-12 d-flex image-color-overlay h-100 flex-column flex-sm-row\">\n                <div class=\"container align-self-center\">\n                    <div class=\"col-sm-12 d-flex align-items-center justify-content-center\">\n                        <div class=\"text-center header-space\">\n                            <hr class=\"hr-accent\">\n                            <h1 class=\"display-4\">Why You Should Use More Enums In Python</h1>\n                            <h2>A gentle introduction to enumerations in Python\n                                <em>- by Florian Dahlitz on June 08, 2020\n                                    (10 min)</em></h2>\n                            <hr class=\"hr-accent\">\n                        </div>\n                    </div>\n                </div>\n            </div>\n        </div>\n    </div>\n    <div class=\"content-section bg-dark-secondary d-flex justify-content-center\">\n        <div class=\"container header-space article\">\n            <h2 id=\"table-of-contents\">Table of Contents</h2>\n<div class=\"toc\">\n<ul>\n<li><a href=\"#table-of-contents\">Table of Contents</a></li>\n<li><a href=\"#introduction\">Introduction</a></li>\n<li><a href=\"#what-is-an-enum\">What is an enum?</a><ul>\n<li><a href=\"#iterating-over-the-members-of-an-enum\">Iterating over the members of an enum</a></li>\n<li><a href=\"#automatic-values\">Automatic values</a></li>\n<li><a href=\"#extending-an-enum\">Extending an enum</a></li>\n</ul>\n</li>\n<li><a href=\"#kinds-of-enums-in-python\">Kinds of enums in Python</a><ul>\n<li><a href=\"#intenum\">IntEnum</a></li>\n<li><a href=\"#intflag\">IntFlag</a></li>\n<li><a href=\"#flag\">Flag</a></li>\n</ul>\n</li>\n<li><a href=\"#why-do-i-need-enums\">Why do I need enums?</a></li>\n<li><a href=\"#summary\">Summary</a></li>\n<li><a href=\"#references\">References</a></li>\n</ul>\n</div>\n<h2 id=\"introduction\">Introduction</h2>\n<p>In this article, you will learn what enums are and how to create and work with them.\nFurthermore, you will learn why you should use them more often in your day to day coding.</p>\n<blockquote>\n<p><strong>Note:</strong> The code snippets used in the article can be found on <a href=\"https://github.com/DahlitzFlorian/why-you-should-use-more-enums-in-python-article-snippets\" target=\"_blank\" rel=\"noopener\">GitHub</a>.</p>\n</blockquote>\n<h2 id=\"what-is-an-enum\">What is an enum?</h2>\n<p><em>enum</em> stands for <em>enumeration</em> and refers to a set of symbolic names, which are called enumeration members.\nThese enum members are bound to unique, constant values.\nYou can iterate over an enumeration and compare its members by identity (Python&rsquo;s <code>is</code> operator).</p>\n<p>The following code snippet shows you a simple example of an enum <code>Colour</code>:</p>\n<pre><code class=\"language-python\"># colour.py\n\nfrom enum import Enum\n\n\nclass Colour(Enum):\n    RED = 1\n    GREEN = 2\n    BLUE = 3\n</code></pre>\n\n<p>We imported the <code>Enum</code> class from Python&rsquo;s <code>enum</code> module.\nIt serves as a base class for defining new enumerations in Python.\nSubsequently, a new enum called <code>Colour</code> is implemented having three enum members: <code>RED</code>, <code>GREEN</code>, and <code>BLUE</code>.</p>\n<blockquote>\n<p><strong>Note:</strong> Although the class syntax is used to define new enumerations, they aren&rsquo;t normal Python classes.\nIf you want to know more about it, check out the <em>How are Enums different?</em> section in the module&rsquo;s documentation [<sup id=\"fnref:1\"><a class=\"footnote-ref\" href=\"#fn:1\">1</a></sup>]:</p>\n</blockquote>\n<p>Let&rsquo;s see how enums behave when used.</p>\n<pre><code class=\"language-python\"># previous colour.py code\n\nc = Colour.RED\nprint(c)\nprint(c.name)\nprint(c.value)\nprint(c is Colour.RED)\nprint(c is Colour.BLUE)\n</code></pre>\n\n<p>We extended the <code>colour.py</code> script by creating a new instance of <code>Colour.RED</code> and assigning it to the variable <code>c</code>.\nFurthermore, we print the string representation of <code>Colour.RED</code>, its name and value.\nAdditionally, we compare <code>c</code>&lsquo;s identity with <code>Colour.RED</code> and <code>Colour.BLUE</code>.</p>\n<pre><code class=\"language-shell\">$ python colour.py\nColour.RED\nRED\n1\nTrue\nFalse\n</code></pre>\n\n<p>Running the script reveals that <code>c</code> is indeed an instance of <code>Colour.RED</code> with <code>RED</code> as its name and <code>1</code> as value.</p>\n<blockquote>\n<p><strong>Note:</strong> We used the <code>is</code> operator to compare the variable <code>c</code> with the different enum members.\nKeep in mind that enums can only be compared to enums and not to integers, even though the enum member values are integers [<sup id=\"fnref:2\"><a class=\"footnote-ref\" href=\"#fn:2\">2</a></sup>].</p>\n</blockquote>\n<h3 id=\"iterating-over-the-members-of-an-enum\">Iterating over the members of an enum</h3>\n<p>Enumerations have a special attribute called <code>__members__</code>, which is a read-only ordered mapping of names and members.\nUtilising <code>__members__</code> allows you to iterate over an enum and print the members as well as their corresponding names.</p>\n<pre><code class=\"language-python\"># iterate.py\n\nfrom enum import Enum\n\n\nclass Colour(Enum):\n    RED = 1\n    GREEN = 2\n    BLUE = 3\n\n\nfor name, member in Colour.__members__.items():\n    print(name, member)\n</code></pre>\n\n<pre><code class=\"language-shell\">$ python iterate.py\nRED Colour.RED\nGREEN Colour.GREEN\nBLUE Colour.BLUE\n</code></pre>\n\n<p>You might ask yourself why we did not something like:</p>\n<pre><code class=\"language-python\">for member in Colour:\n    print(member.name, member)\n</code></pre>\n\n<p>For the example at hand, both approaches produce the same result.\nHowever, if you have an enumeration that has aliases, too, only the approach using <code>__members__</code> will print the aliases as well.\nCheckout the following example:</p>\n<pre><code class=\"language-python\"># iterate_alias.py\n\nfrom enum import Enum\n\n\nclass Colour(Enum):\n    RED = 1\n    GREEN = 2\n    BLUE = 3\n    ALIAS_RED = 1\n\n\nfor name, member in Colour.__members__.items():\n    print(name, member)\n\nprint(&quot;=&quot;*20)\n\nfor member in Colour:\n    print(member.name, member)\n</code></pre>\n\n<pre><code class=\"language-shell\">$ python iterate_alias.py\nRED Colour.RED\nGREEN Colour.GREEN\nBLUE Colour.BLUE\nALIAS_RED Colour.RED\n====================\nRED Colour.RED\nGREEN Colour.GREEN\nBLUE Colour.BLUE\n</code></pre>\n\n<h3 id=\"automatic-values\">Automatic values</h3>\n<p>In the previous example, we assigned integers to the symbolic names <code>RED</code>, <code>GREEN</code>, and <code>BLUE</code>.\nIf the exact values are not important, you can use the <code>enum.auto()</code> function.\nThe function calls <code>_generate_next_value_()</code> internally and generates the values for you.</p>\n<pre><code class=\"language-python\"># auto.py\n\nfrom enum import auto\nfrom enum import Enum\n\n\nclass Colour(Enum):\n    RED = auto()\n    GREEN = auto()\n    BLUE = auto()\n\n\nc = Colour.RED\nprint(c.value)\n</code></pre>\n\n<p>It chooses a suited value for each enum member, which will (most of the time) be the integers we used before.</p>\n<pre><code class=\"language-shell\">$ python auto.py\n1\n</code></pre>\n\n<p>However, the <code>_generate_next_value_()</code> function can be overwritten to generate new values the way you like:</p>\n<pre><code class=\"language-python\"># overwritten_next_values.py\n\nfrom enum import auto\nfrom enum import Enum\n\n\nclass AutoName(Enum):\n    def _generate_next_value_(name, start, count, last_values):\n        if len(last_values) &gt; 0:\n            return last_values[-1] * 2\n        return 2\n\n\nclass Colour(AutoName):\n    RED = auto()\n    GREEN = auto()\n    BLUE = auto()\n\n\nc = Colour.RED\ng = Colour.GREEN\nb = Colour.BLUE\nprint(c.value)\nprint(g.value)\nprint(b.value)\n</code></pre>\n\n<pre><code class=\"language-shell\">$ python overwritte_next_values.py\n2\n4\n8\n</code></pre>\n\n<h3 id=\"extending-an-enum\">Extending an enum</h3>\n<p>Being Python classes, enums can have any (special) methods just like all other classes.\nConsider the following example.</p>\n<pre><code class=\"language-python\"># extending.py\n\nfrom enum import Enum\n\n\nclass Colour(Enum):\n    RED = 1\n    GREEN = 2\n    BLUE = 3\n\n    def __str__(self):\n        return self.name\n\n    def colorize(self):\n        return f&quot;Let's paint everything in {self.name.lower()}&quot;\n\n\nc = Colour.RED\nprint(c)\nprint(c.colorize())\n</code></pre>\n\n<p>We extended the <code>Colour</code> enum by a new method <code>colorize()</code> printing a string generated based on the member&rsquo;s value.\nFurthermore, we overwrite the <code>__str__()</code> dunder method to return the member&rsquo;s name if called.</p>\n<pre><code class=\"language-shell\">$ python extending.py\nRED\nLet's paint everything in red\n</code></pre>\n\n<h2 id=\"kinds-of-enums-in-python\">Kinds of enums in Python</h2>\n<p>Besides <code>Enum</code>, Python provides three derived enumerations out of the box:</p>\n<ul>\n<li><code>IntEnum</code></li>\n<li><code>IntFlag</code></li>\n<li><code>Flag</code></li>\n</ul>\n<p>We will have a look at all three of them.\nKeep in mind that you are free to implement your own derived enumerations based on <code>Enum</code>.\nImplementing your own enumeration will not be covered in the article.</p>\n<h3 id=\"intenum\"><code>IntEnum</code></h3>\n<p>We already know that we can compare enum members using Python&rsquo;s identity operator.\nHowever, the <code>Enum</code> class does not provide ordered comparisons even though integers are used as values for the enumeration members.\nLet&rsquo;s have a look at the following example.</p>\n<pre><code class=\"language-python\"># comparison.py\n\nfrom enum import Enum\n\n\nclass Colour(Enum):\n    RED = 1\n    GREEN = 2\n    BLUE = 3\n\n\nr = Colour.RED\nb = Colour.GREEN\nprint(r &lt; b)\n</code></pre>\n\n<p>Executing the script at hand results in a <code>TypeError</code>.</p>\n<pre><code class=\"language-shell\">$ python comparison.py\nTraceback (most recent call last):\n  File &quot;/home/florian/workspace/python/why-you-should-use-more-enums-in-python-article-snippets/comparison.py&quot;, line 14, in &lt;module&gt;\n    print(r &lt; b)\nTypeError: '&lt;' not supported between instances of 'Colour' and 'Colour'\n</code></pre>\n\n<p>The only thing you can do is making use of equality comparisons like <code>==</code> and <code>!=</code>.\nAdditionally, comparing enum members with any non-enumeration value is not supported.</p>\n<p>However, the derived enumeration <code>IntEnum</code> <em>does</em> provide ordered comparisons as it is also a subclass of <code>int</code>.\nIn order to make our example work, we need to import the <code>IntEnum</code> class instead of <code>Enum</code> and derive <code>Colour</code> from it.\nWe do not need to change anything else.</p>\n<pre><code class=\"language-python\"># comparison.py\n\nfrom enum import IntEnum\n\n\nclass Colour(IntEnum):\n    ...\n</code></pre>\n\n<pre><code class=\"language-shell\">$ python comparison.py\nTrue\n</code></pre>\n\n<h3 id=\"intflag\"><code>IntFlag</code></h3>\n<p>The <code>IntFlag</code> class is pretty similar to the <code>IntEnum</code> class with the exception that is also supports bitwise operations.\nWith supporting bitwise operations I mean that it is possible to combine two enum members resulting in an <code>IntFlag</code> member, too.\nAll other operations on an <code>IntFlag</code> member will result in the loss of the <code>IntFlag</code> membership.</p>\n<p>Let&rsquo;s have a look at an example.\nAssume that we grant permissions to users so that they can read, write and/or execute a certain file.\nWe create an enumeration <code>Permission</code> with the members <code>R</code> (read permission), <code>W</code> (write permission), and <code>X</code> (execute permission) respectively.</p>\n<p>If we have a user, who should have read and write permissions for a certain file, we can combine both using the <code>|</code> operator.</p>\n<pre><code class=\"language-python\"># permissions.py\n\nfrom enum import IntFlag\n\n\nclass Permission(IntFlag):\n    R = 4\n    W = 2\n    X = 1\n\n\nRW = Permission.R | Permission.W\nprint(RW)\nprint(Permission.R + Permission.W)\nprint(Permission.R in RW)\n</code></pre>\n\n<pre><code class=\"language-shell\">$ python permissions.py\nPermissions.R|W\n6\nTrue\n</code></pre>\n\n<h3 id=\"flag\"><code>Flag</code></h3>\n<p>The <code>Flag</code> class does also provide support for bitwise operations but does not inherit from <code>int</code>.\nIn fact, it is like <code>Enum</code> but with support for the bitwise operations.</p>\n<p>If we take the <code>Colour</code> enum from the beginning, we could easily mix the colour white based on the other three colours.</p>\n<pre><code class=\"language-python\"># colour_flag.py\n\nfrom enum import auto\nfrom enum import Flag\n\n\nclass Colour(Flag):\n    RED = auto()\n    GREEN = auto()\n    BLUE = auto()\n    WHITE = RED | GREEN | BLUE\n\n\nprint(Colour.WHITE.name, Colour.WHITE.value)\n</code></pre>\n\n<pre><code class=\"language-shell\">$ python colour_flag.py\nWHITE 7\n</code></pre>\n\n<h2 id=\"why-do-i-need-enums\">Why do I need enums?</h2>\n<p>At this point, we have an understanding of what enums are and how we can create them in Python.\nFurthermore, we are able to compare and work with them.\nHowever, we still do not know <em>why</em> we need and should use enumerations more often.</p>\n<p>The examples we had a look at were pretty simple.\nAlthough the <code>Permission</code> enumeration seems pretty useful, the <code>Colour</code> enum does not.\nWhy would you use these enumerations in your code?</p>\n<p>Have a look at the following Python snippet.</p>\n<pre><code class=\"language-python\"># response_code_magic_numbers.py\n\nfrom http.client import HTTPResponse\n\n\ndef evaluate_response(response: HTTPResponse) -&gt; str:\n    if response.code() == 404:\n        return &quot;Not Found&quot;\n    elif response.code() == 502:\n        return &quot;???&quot;\n    elif response.code() == 400:\n        return &quot;???&quot;\n    else:\n        return &quot;Unknown Status Code&quot;\n</code></pre>\n\n<p>We defined a function, which takes an <code>HTTPResponse</code> object and returns a string based on the status code of the supplied <code>HTTPResponse</code> object.\nYou may know that 404 is the status code for <em>Not Found</em>, but do you know the meaning of 502 and 400?</p>\n<p>These are only two less known status codes and much more are out there.\nIt is hard to read and understand the code without a web search.\nThis is where enumerations come into play.\nWe can implement our own custom enumeration to lend more meaning to the code.</p>\n<pre><code class=\"language-python\"># http_code_enum.py\n\nfrom enum import IntEnum\n\n\nclass HTTPCode(IntEnum):\n    BAD_REQUEST = 400\n    NOT_FOUND = 404\n    BAD_GATEWAY = 502\n</code></pre>\n\n<p>Here an <code>IntEnum</code> is used as we want to be able to compare members of it with integers.\nNow, the function from before looks like this:</p>\n<pre><code class=\"language-python\"># response_code.py\n\nfrom http_code_enum import HTTPCode\nfrom http.client import HTTPResponse\n\n\ndef evaluate_response(response: HTTPResponse) -&gt; str:\n    if response.code() == HTTPCode.NOT_FOUND:\n        return &quot;Not Found&quot;\n    elif response.code() == HTTPCode.BAD_GATEWAY:\n        return &quot;???&quot;\n    elif response.code() == HTTPCode.BAD_REQUEST:\n        return &quot;???&quot;\n    else:\n        return &quot;Unknown Status Code&quot;\n</code></pre>\n\n<p>In essence, if you have magic numbers in your code, you should definitely consider to either assign them to a variable or group them together to an enumeration.\nThis way your code&rsquo;s readability increases a lot.\nIt is especially true if you want to write tests for your code.</p>\n<h2 id=\"summary\">Summary</h2>\n<p>Congratulations, you have made it through the article!\nWhile reading the article you learned what enums are and how you can create them in Python.\nFurthermore, you learned how to compare and work with them.\nYou had a look at a few examples and understood why it is good practice to use enumerations once in a while.</p>\n<p>I hope you enjoyed reading the article.\nFeel free to share it with your friends and colleagues!\nDo you have feedback?\nI am eager to hear it!\nYou can contact me via the <a href=\"https://florian-dahlitz.de/contact\">contact form</a> or other resources listed in the <a href=\"https://florian-dahlitz.de/contact\">contact section</a>.</p>\n<p>If you have not already, consider following me on Twitter, where I am <a href=\"https://twitter.com/DahlitzF\" target=\"_blank\" rel=\"noopener\">@DahlitzF</a>, or subscribing to my <a href=\"https://florian-dahlitz.de/newsletter\">newsletter</a>!\nStay curious and keep coding!</p>\n<h2 id=\"references\">References</h2>\n<div class=\"footnote\">\n<hr>\n<ol>\n<li id=\"fn:1\">\n<p><a href=\"https://docs.python.org/3/library/enum.html#how-are-enums-different\" target=\"_blank\" rel=\"noopener\">How are Enums different?</a>&#160;<a class=\"footnote-backref\" href=\"#fnref:1\" title=\"Jump back to footnote 1 in the text\">&#8617;</a></p>\n</li>\n<li id=\"fn:2\">\n<p><a href=\"https://docs.python.org/3/library/enum.html#comparisons\" target=\"_blank\" rel=\"noopener\">Enum Comparisons</a>&#160;<a class=\"footnote-backref\" href=\"#fnref:2\" title=\"Jump back to footnote 2 in the text\">&#8617;</a></p>\n</li>\n</ol>\n</div>\n            <p><a href=\"https://twitter.com/share?ref_src=twsrc%5Etfw\" class=\"twitter-share-button\"\n                  data-size=\"large\" data-via=\"DahlitzF\" data-lang=\"en\" data-show-count=\"false\">Tweet</a>\n                <script async src=\"https://platform.twitter.com/widgets.js\" charset=\"utf-8\"></script>\n            </p>\n            </p>\n        </div>\n    </div>\n\n\n<footer class=\"page-footer font-small bg-dark pt-4\">\n\n        <div class=\"container d-flex align-content-center justify-content-center mb-5\">\n            <div class=\"row d-flex justify-content-center align-content-center\">\n                <h2 class=\"w-fit-content h-fit-content mb-4 text-center\">Get notified about new articles and more.</h2>\n                <form class=\"input-group col-12 col-sm-9 col-lg-6 mailing-list\"\n                      action=\"https://florian-dahlitz.us4.list-manage.com/subscribe/post?u=ea43bb5783023bea08a4aa7f1&amp;id=45a7c7ba69\"\n                      method=\"post\" id=\"mc-embedded-subscribe-form\" name=\"mc-embedded-subscribe-form\">\n                    <input type=\"email\" id=\"mce-EMAIL\" name=\"EMAIL\" class=\"form-control form-control-sm mr-3\"\n                           placeholder=\"Your email\" aria-label=\"Your email\" required>\n                    <!-- real people should not fill this in and expect good things - do not remove this or risk form bot signups-->\n                    <div style=\"position: absolute; left: -5000px;\" aria-hidden=\"true\"><input type=\"text\"\n                                                                                              name=\"b_ea43bb5783023bea08a4aa7f1_45a7c7ba69\"\n                                                                                              tabindex=\"-1\"\n                                                                                              value=\"\"></div>\n                    <div class=\"input-group-append\">\n                        <input class=\"btn btn-sm btn-outline-light my-0\" type=\"submit\" id=\"mc-embedded-subscribe\"\n                               name=\"subscribe\" value=\"Subscribe\">\n                    </div>\n                </form>\n            </div>\n        </div>\n\n    <div class=\"container\">\n        <ul class=\"list-unstyled list-inline text-center social-icons-list\">\n            <li class=\"list-inline-item\">\n                <a href=\"https://twitter.com/DahlitzF\" target=\"_blank\" rel=\"noopener\" class=\"btn-floating btn-fb mx-1\">\n                    <img src=\"/static/images/icons/twitter.svg\" alt=\"Twitter Icon\">\n                </a>\n            </li>\n            <li class=\"list-inline-item\">\n                <a href=\"https://www.linkedin.com/in/florian-dahlitz-697339134\" target=\"_blank\" rel=\"noopener\"\n                   class=\"btn-floating btn-tw mx-1\">\n                    <img src=\"/static/images/icons/linkedin.svg\" alt=\"LinkedIn Icon\">\n                </a>\n            </li>\n            <li class=\"list-inline-item\">\n                <a href=\"https://www.xing.com/profile/Florian_Dahlitz\" target=\"_blank\" rel=\"noopener\"\n                   class=\"btn-floating btn-gplus mx-1\">\n                    <img src=\"/static/images/icons/xing.svg\" alt=\"Xing Icon\">\n                </a>\n            </li>\n            <li class=\"list-inline-item\">\n                <a href=\"https://medium.com/@DahlitzF\" target=\"_blank\" rel=\"noopener\" class=\"btn-floating btn-li mx-1\">\n                    <img src=\"/static/images/icons/medium.svg\" alt=\"Medium Icon\">\n                </a>\n            </li>\n            <li class=\"list-inline-item\">\n                <a href=\"https://github.com/DahlitzFlorian\" target=\"_blank\" rel=\"noopener\"\n                   class=\"btn-floating btn-dribbble mx-1\">\n                    <img src=\"/static/images/icons/github.svg\" alt=\"GitHub Icon\">\n                </a>\n            </li>\n        </ul>\n    </div>\n    <div class=\"footer-copyright text-center py-3 bg-dark\">&copy; 2020 Florian Dahlitz. All Rights Reserved.\n    </div>\n</footer>\n\n<script src=\"/static/js/jquery-3.4.1.min.js\"></script>\n<script src=\"/static/js/bootstrap.bundle.min.js\"></script>\n\n<!-- Prism -->\n<script src=\"/static/js/prism.js?version=1.0\"></script>\n</body>\n</html>",
  "url": "https://florian-dahlitz.de/blog/why-you-should-use-more-enums-in-python"
}